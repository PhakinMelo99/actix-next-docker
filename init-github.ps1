param(
  [string]$ProjectPath = (Get-Location).Path,     # ‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  [string]$RepoName = "",                         # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ repo ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ gh ‡∏™‡∏£‡πâ‡∏≤‡∏á (‡πÄ‡∏ß‡πâ‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ RemoteUrl)
  [switch]$Private,                               # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö RepoName; ‡∏ñ‡πâ‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö private
  [string]$RemoteUrl = ""                         # ‡πÉ‡∏™‡πà URL ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö repo ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
)

Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

# 0) ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
function Test-Exists($name){ (Get-Command $name -ErrorAction SilentlyContinue) -ne $null }
if (-not (Test-Exists git)) { throw "‡πÑ‡∏°‡πà‡∏û‡∏ö 'git' ‡πÉ‡∏ô PATH ‚Äî ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Git ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà" }

$HasGh = Test-Exists gh

# 1) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
Set-Location -Path $ProjectPath

# 2) ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (.gitignore / .gitattributes / .dockerignore / README.md) ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
#    ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° Next.js + Node, Rust/Actix, Docker, ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° dev ‡∏ö‡∏ô Windows
if (-not (Test-Path ".gitignore")) {
@'
# ===== Global OS / Editor =====
.DS_Store
Thumbs.db
*.log
*.tmp
*.swp
*.swo
.npmrc
.vscode/
.idea/

# ===== Node / Next.js =====
frontend/node_modules/
frontend/.next/
frontend/.turbo/
frontend/.vercel/
frontend/.cache/
frontend/dist/
frontend/coverage/

# env
frontend/.env.local
frontend/.env.development.local
frontend/.env.test.local
frontend/.env.production.local
frontend/.env

# ===== Rust / Cargo =====
backend/target/
backend/.cargo/
**/*.rs.bk

# ===== Docker =====
*.env
**/.env
**/.env.*
docker-compose.override.yml

# ===== OS-specific =====
*.orig
*.rej

# ===== Misc build =====
**/build/
**/dist/
**/tmp/
**/coverage/
'@ | Out-File -Encoding utf8 .gitignore
}

if (-not (Test-Path ".gitattributes")) {
@'
# ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö normalize ‡πÄ‡∏õ‡πá‡∏ô LF ‡πÉ‡∏ô repo (Windows ‡∏à‡∏∞ checkout ‡πÄ‡∏õ‡πá‡∏ô CRLF ‡∏ï‡∏≤‡∏° core.autocrlf)
* text=auto

# ‡∏ö‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô binary
*.png binary
*.jpg binary
*.jpeg binary
*.gif binary
*.ico binary
*.pdf binary
'@ | Out-File -Encoding utf8 .gitattributes
}

if (-not (Test-Path ".dockerignore")) {
@'
# ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Docker context ‡∏ö‡∏ß‡∏°
.git
.gitignore
.gitattributes
**/node_modules
**/target
**/dist
**/.next
**/.env
**/.env.*
Dockerfile*
docker-compose*.yml
README.md
'@ | Out-File -Encoding utf8 .dockerignore
}

if (-not (Test-Path "README.md")) {
@"
# Actix (Rust) + Next.js (Docker Dev Stack)

## ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
- \`backend\` ‚Äî Actix-web (Rust) + healthcheck + ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á endpoint (hello/add/user/time/bytes/sse/secure)
- \`frontend\` ‚Äî Next.js App Router ‡∏û‡∏£‡πâ‡∏≠‡∏° proxy API \`/api/backend/*\` ‡πÑ‡∏õ \`http://backend-dev:8080\` (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô docker network)
- \`docker-compose.dev.yml\` ‚Äî dev stack (backend-dev, frontend-dev, network \`appnet\`)

## ‡∏£‡∏±‡∏ô dev
\`\`\`bash
docker compose -f docker-compose.dev.yml up --build
# ‡πÄ‡∏õ‡∏¥‡∏î http://localhost:3000
# Backend health: http://localhost:8080/healthz
\`\`\`

## ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡∏ù‡∏±‡πà‡∏á frontend)
- \`NEXT_PUBLIC_API_URL=/api/backend\` (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡πà‡∏≤‡∏ô Next API proxy)
- \`BACKEND_INTERNAL_URL=http://backend-dev:8080\` (‡∏ß‡∏¥‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô network ‡∏Ç‡∏≠‡∏á Docker)

## ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡∏ù‡∏±‡πà‡∏á backend)
- \`RUST_LOG\`, \`RUST_BACKTRACE\`, \`API_KEY\` (‡πÄ‡∏ä‡πà‡∏ô \`dev123\`)

## ‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡πà‡∏≤‡∏ô
- ‡πÉ‡∏ô dev ‡πÄ‡∏£‡∏≤ proxy ‡∏ú‡πà‡∏≤‡∏ô \`/api/backend/*\` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ client-side ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏°‡πâ backend ‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô container
- ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏¢‡∏Å compose/traefik/nginx ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö NEXT_PUBLIC_* ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ domain ‡∏à‡∏£‡∏¥‡∏á
"@ | Out-File -Encoding utf8 README.md
}

# 3) git init + config ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
if (-not (Test-Path ".git")) {
  git init | Out-Null
}

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ CRLF
git config core.autocrlf true | Out-Null
git config core.longpaths true | Out-Null

# 4) ‡∏™‡∏£‡πâ‡∏≤‡∏á commit ‡πÅ‡∏£‡∏Å (idempotent: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏•‡πâ‡∏°)
git add -A
try {
  git commit -m "Initial commit: Actix + Next dev stack (Docker dev)" | Out-Null
} catch {
  Write-Host "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ commit (‡∏≠‡∏≤‡∏à‡πÄ‡∏Ñ‡∏¢ commit ‡πÅ‡∏•‡πâ‡∏ß)" -ForegroundColor Yellow
}

# 5) ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏ú‡∏π‡∏Å remote
$hasRemote = git remote | Select-String -Quiet "origin"

if ($RemoteUrl -and -not $hasRemote) {
  git remote add origin $RemoteUrl
} elseif ($RepoName -and $HasGh -and -not $hasRemote) {
  # ‡πÉ‡∏ä‡πâ gh ‡∏™‡∏£‡πâ‡∏≤‡∏á repo ‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡∏π‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  $visibility = $(if ($Private) { "private" } else { "public" })
  # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login: gh auth login
  gh repo create $RepoName --$visibility --source "$ProjectPath" --remote origin --push
} elseif (-not $hasRemote -and -not $RemoteUrl -and -not $RepoName) {
  Write-Host "`n[‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥] ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á remote: ‡πÉ‡∏™‡πà -RemoteUrl ‡∏´‡∏£‡∏∑‡∏≠ -RepoName ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå push ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢" -ForegroundColor Yellow
}

# 6) push (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ remote ‡πÅ‡∏•‡πâ‡∏ß)
$hasRemote = git remote | Select-String -Quiet "origin"
if ($hasRemote) {
  # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ branch main ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà
  $curBranch = (git branch --show-current)
  if (-not $curBranch) { git checkout -b main | Out-Null }
  elseif ($curBranch -ne "main") { git branch -M main | Out-Null }

  git push -u origin main
  Write-Host "`n‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: push ‡∏Ç‡∏∂‡πâ‡∏ô origin/main ‡πÅ‡∏•‡πâ‡∏ß" -ForegroundColor Green
} else {
  Write-Host "`n‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ push ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ remote origin ‚Äî ‡∏£‡∏∞‡∏ö‡∏∏ -RemoteUrl ‡∏´‡∏£‡∏∑‡∏≠ -RepoName ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà" -ForegroundColor Yellow
}

# 7) ‡πÅ‡∏ñ‡∏°: ‡∏™‡∏£‡πâ‡∏≤‡∏á .env.example (‡∏ä‡πà‡∏ß‡∏¢ onboard ‡∏ó‡∏µ‡∏°)
if (-not (Test-Path "frontend\.env.example")) {
@'
# Frontend (Next.js)
NODE_ENV=development
PORT=3000
NEXT_PUBLIC_API_URL=/api/backend
BACKEND_INTERNAL_URL=http://backend-dev:8080
'@ | Out-File -Encoding utf8 "frontend\.env.example"
}

if (-not (Test-Path "backend\.env.example")) {
@'
# Backend (Actix)
RUST_LOG=info,actix_web=info
RUST_BACKTRACE=1
API_KEY=dev123
'@ | Out-File -Encoding utf8 "backend\.env.example"
}

Write-Host "`nüéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Git/GitHub + ‡πÑ‡∏ü‡∏•‡πå ignore/attrs/dockerignore + README" -ForegroundColor Green
